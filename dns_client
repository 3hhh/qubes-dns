#!/bin/bash
#
# See usage()!
#
# Copyright (C) 2023  David Hobach  GPLv3
# version: 0.7
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

source blib
eval "$B_SCRIPT"

source "$B_SCRIPT_DIR/dnsCommon" || { B_ERR="Failed to source the common code." ; B_E ; }

#name of the nft chains created by this script
FW_FILTER_CHAIN="dns_client_filter"
FW_NAT_CHAIN="dns_client_nat"

#maybe TODO: add some clean call to flush the created firewall rules
function usage {
echo "$B_SCRIPT_NAME setup [DNS server IP]|firewall-update [DNS server IP]|reset

Utility script for a proxy VM (provides_network=true) to use the given DNS server instead of the default Qubes OS one.
All VMs using that proxy VM will then use that DNS server afterwards.

To enable it, you must change the proxy VM as follows:
- insert dns_client setup [DNS server IP] inside /rw/config/rc.local
- insert dns_client firewall-update [DNS server IP] inside /rw/config/qubes-firewall-user-script"
exit 1
}

function assertFirewallService {
#cf. https://github.com/QubesOS/qubes-issues/issues/3269 why it's good to check the firewall service is up
systemctl status qubes-firewall > /dev/null || { B_ERR="The qubes-firewall service appears to be down! This is certainly an issue. Please investigate!" ; B_E ; }
}

function log {
local msg="$1"
logger -t "$B_SCRIPT_NAME" -p user.info "$msg"
}

function setupR {
local dnsServer="$1"
[[ "$dnsServer" == "127."* ]] && B_ERR="Using loopback is not supported for security reasons (requires routing to localhost addresses). Please make your local DNS server listen on the public interfaces instead." && B_E

log "setup started..."
assertFirewallService

#update /etc/resolv.conf
cp -f "$RESOLV" "$RESOLV.bak" || { B_ERR="Failed to copy $RESOLV." ; B_E ; }
echo "nameserver $dnsServer" > "$RESOLV" || { B_ERR="Failed to write to $RESOLV." ; B_E ; }

#make sure the DNS server changes are reflected by the Qubes DNAT rules
#NOTE: currently not really needed as we do our own DNAT below
#/usr/lib/qubes/qubes-setup-dnat-to-ns || { B_ERR="Failed to setup the Qubes OS DNAT rules. Not run inside a proxy VM?" ; B_E ; }

#FORCE usage of the DNS server regardless of what DNS server the upstream VMs are using
#prevents misconfigured clients
#prevents malware or strange client implementations from playing with custom DNS servers
#
#NOTES @nft tricks:
# - we use a hook priority lower than the Qubes nat chain to be called _before_ that one; this technique should work for both Qubes 4.1 and 4.2 firewalls (https://github.com/QubesOS/qubes-core-agent-linux/pull/407)
#   - https://wiki.nftables.org/wiki-nftables/index.php/Netfilter_hooks
#   - accepts will pass it on to the next hook/callback, denies will be final --> the technique only works, if the Qubes default policy is accept
# - https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains
# - for convenience we also create our own table (nft tables have no practical relevance - only the hook order/priority matters)
( set -e
  nft add table ip "$FW_NAT_CHAIN"
  nft add chain ip "$FW_NAT_CHAIN" "$FW_NAT_CHAIN" '{ type nat hook prerouting priority dstnat -1 ; }'
  nft add rule ip "$FW_NAT_CHAIN" "$FW_NAT_CHAIN" "ip saddr != $dnsServer ip daddr != $dnsServer udp dport 53 counter dnat to ${dnsServer}:53"
  nft add rule ip "$FW_NAT_CHAIN" "$FW_NAT_CHAIN" "ip saddr != $dnsServer ip daddr != $dnsServer tcp dport 53 counter dnat to ${dnsServer}:53"
)
[ $? -ne 0 ] && B_ERR="Failed to setup some of the firewall DNAT rules. Please investigate!" && B_E

#identify table & chain for filtering
local rules tchain ttable
rules="$(nft list ruleset)" || { B_ERR="Failed to read the nft ruleset." ; B_E ; }

#identify the forward table & chain
if [[ "$rules" == *"chain custom-input "* ]] ; then # >= Qubes 4.2
  ttable="qubes"
  tchain="custom-forward"
elif [[ "$rules" == *"chain INPUT "* ]] ; then # <= Qubes 4.1
  ttable="filter"
  tchain="FORWARD"
else
  B_ERR="Failed to identify a matching target nft table & chain."
  B_E
fi

#allow traffic to the DNS server from other VMs and the other way around
( set -e
  nft add chain ip "$ttable" "$FW_FILTER_CHAIN"
  nft add rule ip "$ttable" "$FW_FILTER_CHAIN" iifname "vif*" oifname "vif*" ip daddr "$dnsServer" tcp dport 53 counter accept
  nft add rule ip "$ttable" "$FW_FILTER_CHAIN" iifname "vif*" oifname "vif*" ip daddr "$dnsServer" udp dport 53 counter accept
  nft add rule ip "$ttable" "$FW_FILTER_CHAIN" iifname "vif*" oifname "vif*" ip daddr "$dnsServer" tcp sport 53 counter accept
  nft add rule ip "$ttable" "$FW_FILTER_CHAIN" iifname "vif*" oifname "vif*" ip daddr "$dnsServer" udp sport 53 counter accept
  nft insert rule ip "$ttable" "$tchain" counter jump "$FW_FILTER_CHAIN"
)
[ $? -ne 0 ] && B_ERR="Failed to setup some of the firewall forward filtering rules. Please investigate!" && B_E

log "setup done"
return 0
}

function reset {
nft flush table ip "$FW_NAT_CHAIN"
nft flush chain ip filter "$FW_FILTER_CHAIN" &> /dev/null # <= Qubes 4.1
nft flush chain ip qubes "$FW_FILTER_CHAIN" &> /dev/null # >= Qubes 4.2
#our jumps to the then empty chains may stay - they don't hurt
}

function firewallUpdateR {
local uptime rules
local dnsServer="$1"
#NOTE: Actually we don't need to do anything here, but we only _check_ whether everything is still setup correctly (in case Qubes OS suddenly does things differently than ever before).

log "firewall-update started..."

#NOTE:
#we may be called during setup() --> we silently quit our checks then
uptime="$(grep -E -o '^[0-9]+' /proc/uptime)" || { B_ERR="Failed to identify the uptime!" ; B_E ; }
[ $uptime -le 30 ] && log "firewall-update right during/after boot. Skipping..." && return 0

assertFirewallService

#make sure /etc/resolv.conf still contains our server
local out="$(< $RESOLV)"
[[ "$out" == "nameserver $dnsServer" ]] || { B_ERR="$RESOLV changed on Qubes OS firewall update. This is unexpected. Please investigate!" ; B_E ; }

rules="$(nft list ruleset)" || { B_ERR="Failed to read the nft ruleset." ; B_E ; }

#make sure our custom chains still exist
[[ "$rules" == *" jump $FW_FILTER_CHAIN"* ]] || { B_ERR="Failed to find the $FW_FILTER_CHAIN chain. Please ivestigate!" ; B_E ; }
[[ "$rules" == *" jump $FW_NAT_CHAIN"* ]] || { B_ERR="Failed to find the $FW_NAT_CHAIN chain. Please ivestigate!" ; B_E ; }

#check whether our DNS server exists in the rules
[[ "$rules" == *" $dnsServer udp dport 53 "* ]] || { B_ERR="Failed to find the DNS server $dnsServer in the firewall rules. Please ivestigate!" ; B_E ; }

log "firewall-update done"
return 0
}

################ main ############

b_initCachingMessageHandler && b_setMessageHandler "b_cachingMessageHandler notifyMessageHandler"
[[ $EUID -ne 0 ]] && B_ERR="This script must be run as root." && B_E

b_deps "nft" "grep"
[ $# -lt 1 ] && usage
#special case: a single parameter may happen, if salt didn't have the correct IP (usually on first run, if sys-dns wasn't created yet)
[ $# -ne 2 ] && B_ERR="Invalid number of parameters passed. Maybe no sys-dns IP configured @salt? Aborting..." && B_E
cmd="$1"
shift

case "$cmd" in
  "setup")
    setupR "$@"
    ;;
  "firewall-update")
    firewallUpdateR "$@"
    ;;
  "reset")
    reset "$@"
    ;;
  *)
    usage
    ;;
esac

# vim: ts=2 sw=2 et
